// <auto-generated />
using System;
using DiagramGenerator.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DiagramGenerator.DataAccess.Migrations
{
    [DbContext(typeof(DiagramGeneratorContext))]
    [Migration("20210707222343_InitMigration")]
    partial class InitMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Lp")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.Criterion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Lp")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Criterion");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.Diagram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Lp")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Diagram");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.Input", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Lp")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Input");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.ManyToMany.DiagramClient", b =>
                {
                    b.Property<Guid>("DiagramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DiagramId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("DiagramClient");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.ManyToMany.DiagramCriterion", b =>
                {
                    b.Property<Guid>("DiagramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CriterionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DiagramId", "CriterionId");

                    b.HasIndex("CriterionId");

                    b.ToTable("DiagramCriterion");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.ManyToMany.DiagramInput", b =>
                {
                    b.Property<Guid>("DiagramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("DiagramId", "InputId");

                    b.HasIndex("InputId");

                    b.ToTable("DiagramInput");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.ManyToMany.DiagramMethod", b =>
                {
                    b.Property<Guid>("DiagramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DiagramId", "MethodId");

                    b.HasIndex("MethodId");

                    b.ToTable("DiagramMethod");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.ManyToMany.DiagramOutput", b =>
                {
                    b.Property<Guid>("DiagramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OutputId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("DiagramId", "OutputId");

                    b.HasIndex("OutputId");

                    b.ToTable("DiagramOutput");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.ManyToMany.DiagramRequirement", b =>
                {
                    b.Property<Guid>("DiagramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RequirementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DiagramId", "RequirementId");

                    b.HasIndex("RequirementId");

                    b.ToTable("DiagramRequirement");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.ManyToMany.InputSupplier", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SupplierId", "InputId");

                    b.HasIndex("InputId");

                    b.ToTable("InputSupplier");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.ManyToMany.UserDiagram", b =>
                {
                    b.Property<string>("UserMail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("DiagramId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserMail", "DiagramId");

                    b.HasIndex("DiagramId");

                    b.ToTable("UserDiagram");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.Method", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Lp")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Method");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Employees")
                        .HasColumnType("int");

                    b.Property<int>("Lp")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TimeInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.Output", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Lp")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Output");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DiagramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Lp")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiagramId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("Process");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.Requirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Lp")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Requirement");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Lp")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.ManyToMany.DiagramClient", b =>
                {
                    b.HasOne("DiagramGenerator.DataAccess.Model.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiagramGenerator.DataAccess.Model.Diagram", "Diagram")
                        .WithMany("Clients")
                        .HasForeignKey("DiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Diagram");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.ManyToMany.DiagramCriterion", b =>
                {
                    b.HasOne("DiagramGenerator.DataAccess.Model.Criterion", "Criterion")
                        .WithMany()
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiagramGenerator.DataAccess.Model.Diagram", "Diagram")
                        .WithMany("Criteria")
                        .HasForeignKey("DiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criterion");

                    b.Navigation("Diagram");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.ManyToMany.DiagramInput", b =>
                {
                    b.HasOne("DiagramGenerator.DataAccess.Model.Diagram", "Diagram")
                        .WithMany("Inputs")
                        .HasForeignKey("DiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiagramGenerator.DataAccess.Model.Input", "Input")
                        .WithMany()
                        .HasForeignKey("InputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagram");

                    b.Navigation("Input");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.ManyToMany.DiagramMethod", b =>
                {
                    b.HasOne("DiagramGenerator.DataAccess.Model.Diagram", "Diagram")
                        .WithMany("Methods")
                        .HasForeignKey("DiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiagramGenerator.DataAccess.Model.Method", "Method")
                        .WithMany()
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagram");

                    b.Navigation("Method");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.ManyToMany.DiagramOutput", b =>
                {
                    b.HasOne("DiagramGenerator.DataAccess.Model.Diagram", "Diagram")
                        .WithMany("Outputs")
                        .HasForeignKey("DiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiagramGenerator.DataAccess.Model.Output", "Output")
                        .WithMany()
                        .HasForeignKey("OutputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagram");

                    b.Navigation("Output");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.ManyToMany.DiagramRequirement", b =>
                {
                    b.HasOne("DiagramGenerator.DataAccess.Model.Diagram", "Diagram")
                        .WithMany("Requirements")
                        .HasForeignKey("DiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiagramGenerator.DataAccess.Model.Requirement", "Requirement")
                        .WithMany()
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagram");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.ManyToMany.InputSupplier", b =>
                {
                    b.HasOne("DiagramGenerator.DataAccess.Model.Input", "Input")
                        .WithMany("Suppliers")
                        .HasForeignKey("InputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiagramGenerator.DataAccess.Model.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Input");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.ManyToMany.UserDiagram", b =>
                {
                    b.HasOne("DiagramGenerator.DataAccess.Model.Diagram", "Diagram")
                        .WithMany()
                        .HasForeignKey("DiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiagramGenerator.DataAccess.Model.User", "User")
                        .WithMany("Diagrams")
                        .HasForeignKey("UserMail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagram");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.Operation", b =>
                {
                    b.HasOne("DiagramGenerator.DataAccess.Model.Process", "Process")
                        .WithMany("Operations")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("Process_Operation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Process");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.Process", b =>
                {
                    b.HasOne("DiagramGenerator.DataAccess.Model.Diagram", "Diagram")
                        .WithOne("Process")
                        .HasForeignKey("DiagramGenerator.DataAccess.Model.Process", "DiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagram");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DiagramGenerator.DataAccess.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DiagramGenerator.DataAccess.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiagramGenerator.DataAccess.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DiagramGenerator.DataAccess.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.Diagram", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Criteria");

                    b.Navigation("Inputs");

                    b.Navigation("Methods");

                    b.Navigation("Outputs");

                    b.Navigation("Process");

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.Input", b =>
                {
                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.Process", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("DiagramGenerator.DataAccess.Model.User", b =>
                {
                    b.Navigation("Diagrams");
                });
#pragma warning restore 612, 618
        }
    }
}
